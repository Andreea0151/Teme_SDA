Nicu Andreea
311AB

												Tema 1: ATP Cup 🏆



	Implementarea programului este realizată folosind fișier header (Tema1.h) și sursă (Tema1.c). Metodele implementate sunt testate în fișierul main.c.

✩Cerința 1
    Pentru prima cerință, structura rezolvării este astfel:
Fiecare nod din lista va contiune o variabilă de tip Country; în acest sens, fiecare echipa participantă a turneului va fi caracterizată de numele țării respective, un scor global în care punctajul va fi obținut pe parcursul turneului, jucători și numărul acestora. De asemenea, se cunosc date personale despre fiecare dintre aceștia: nume, prenume și scorul personal. Astfel:
-> jucătorii unei echipe vor fi reținuți într-un vector, funcția "alocare_Player" alocă memorie pentru stocarea jucătorilor
-> datele acestora vor fi citite în funcția "citire_Player" în ordinea în care aceștia se află în fișierul de intrare, "date.în":
	- nume, prenume, pentru citirea cărora se va folosi un buffer;
	❕ În cazul în care un jucător are 2 prenume, acestea sunt scrise cu cratimă "-" și reprezintă un singur șir de caractere. Pentru acest caz, am folosit un șir auxiliar (de tip char) prin intermediul căruia se verifică dacă primul caracter este cifra (caracter cifra) sau nu. În situația afirmativă, înseamnă că jucătorul nu are două prenume, iar următoarea citire va fi a scorului. Altfel, funcția "strcat" concateneaza cele 2 șiruri și cratima dintre ele, reprezentând un singur șir de caractere.
-> "citire_Country" va citi astfel toate datele despre fiecare echipa participantă, după numele țării fiind apelata funcția de citire a jucătorilor
-> țările participante sunt adăugate într-o lista circulară, dublu înlănțuită, legătura dintre primul și ultimul nod fiind reprezentată de santinelă

✩Cerința 2
    Pentru eliminarea țărilor cu scor inițial minim rezolvarea este abordată astfel:
-> scorurile inițiale, reprezentate de media aritmetică a scorurilor personale ale jucătorilor din lotul țării respective, au fost adăugate într-un vector de medii: funcția "scor_initial"
-> în structura listei am adăugat un nou câmp, "poziție", ce va reține poziția unei țări în vectorul de medii
-> funcția "scor_minim" returnează poziția scorului minim din vector, iar atunci când, în urmă parcurgerii, aceasta va coincide cu poziția nodului, țară respectivă este eliminată; de asemenea, odată cu actualizarea listei, simultan, va fi actualizat și vectorul de medii prin funcția "stergere_el_vector" (elimina scorul minim corespunzător țării ce tocmai a fost eliminate), dar și câmpul poziție din structura, prin decrementare.
-> ștergerea va fi apelata într-un while ("stergere_tara", respectiv "stergere_el_vector"), până când numărul țărilor devine cea mai mare putere a lui 2 posibilă

✩Cerința 3
-> țările rămase în lista sunt adăugate într-o stivă; operații folosite în program pentru această structura de date:
    - push		-> adaugă element
    - isEmpty_stack  	-> verifică dacă există echipe în stivă
    - pop        	-> elimina noduri din stivă
-> se scot succesiv câte două țări din stivă, iar meciul dintre ele va fi adăugat într-o coadă; operații - coadă:
    - createQueue	-> creare coadă
    - enQueue    	-> adăugare element
    - isEmpty_queue    	-> verifică existența nodurilor
    - deQueue    	-> scoaterea unui meci din coadă
-> funcția "etapă" scoate țări din stivă și adaugă meciuri în coadă, până când nu mai există țări
-> "meci", constă în confruntarea fiecărui jucător din prima echipa cu toți ceilalți jucători din echipa adversă, iar în urmă confruntării este reținut scorul prin apelarea funcției "punctaj"
-> în continuare, este verificat punctajul, iar țară câștigătoare este adăugată într-o nouă stivă, WINNER ("push_WINNER")
-> funcția "verificare" reține scorul global al fiecărei echipe și returnează țară câștigătoare
-> funcția "Stack_size" va returna numărul de elemente existente în stivă WINNER; astfel vor fi repetate procedeele descrise până când în WINNER va rămâne o singură echipa, cea câștigătoare (atunci când Stack_size == 1)

✩Cerința 4
-> jucătorii ultimelor patru țări rămase în stiva WINNER vor fi adăugați într-un BST - arbore binar de căutare: în while-ul din cerința anterioară se declara o stivă auxiliară, Aux, în care sunt adăugați jucătorii ultimelor 4 țări câștigătoare (atunci când (Stack_size(WINNER) == 4) ); în acest fel, după ieșirea din ciclul repetitiv, scorurile jucătorilor vor fi actualizate
-> funcția "rădăcina" creează rădăcina arborelui, iar "înserare" adaugă jucătorii în continuare astfel:
    - dacă noul jucător are scorul mai mic decât al celui deja existent, acesta va fi inserat în stânga celui cu care a fost comparat
    - altfel, va fi inserat în dreapta acestuia
    ❕ dacă scorurile celor doi jucători sunt egale, atunci adăugarea în arbore se va face cu ajutorul funcției "strcmp" astfel:
        - va fi adăugat jucătorul al cărui nume este primul dpdv alfabetic
        ❕ dacă însă numele de familie sunt aceleași, atunci:
            - se adaugă în arbore jucătorul al cărui prenume este primul dpdv alfabetic

✩Cerința 5
-> în fișierul cerințe.în se găsesc numele și prenumele a 2 jucători: se alocă memorie "alocare_memorie", iar datele celor doi sunt citite în funcția "citire_cerinta5"
-> se numărara jucătorii din BST care care au scorul personal inclus între cele două scoruri personale ale celor doi, aceștia nefiind incluși; în acest sens, funcția de tip int, "numarare_jucatori", va primi că parametru un nod de tip Arbore și două numere, x și y, între care se va verifică scorul, urmând că funcția să returneze numărul respectiv în cazul îndeplinirii condiției (scorul ∈ (x ; y) ) .
    ❕ dacă un jucător din cei doi primiți că input nu se găsește în BST, se va afișa un mesaj corespunzător; astfel, funcția "căutare", printr-o implementare recursivă, returnează 1 atunci când este găsit numele jucătorului, altfel căutarea se continuă în subarborele stâng, respectiv drept

	Functiile implementate sunt testate in main.c, prin apelarea acestora, introduse fiind de "printf-uri" corespunzatoare. Totodata, in fisierul "cerinte.in" exista valori (0, 1), fiecare cifră fiind corespunzatoare fiecărei cerințe, iar valoarea ei hotărăște dacă fișierul de iesire rezultate.out va conține afisarea cerinței respective. In acest sens, am creat un vector v, in care au fost introduse valorile din fisier. Atunci cand valoarea din vector este diferita de 0 (v[i]), se va realiza cerinta corespunzatoare.
Structurile de date folosite, lista, stive, cozi și arbore binar de căutare, au fost declarate in "Tema1.h", alaturi de funtiile implementate in "Tema1.c". 💛

